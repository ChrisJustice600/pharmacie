// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  role          Role            @default(EMPLOYE)
  movements     StockMovement[]
  sales         Sale[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id           String   @id @default(uuid())
  name         String
  description  String?
  laboratory   String?
  minStock     Int      @default(0)
  sellingPrice Decimal? @db.Decimal(10, 2)
  costPrice    Decimal? @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  stocks        Stock[]
  movements     StockMovement[]
  Alert         Alert[]
  InventoryItem InventoryItem[]
  saleItems     SaleItem[]
}

model Stock {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  expiration  DateTime?
  lotNumber   String?
  supplier    String?
  deliveryDoc String? // URL to PDF or image
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StockMovement {
  id        String       @id @default(uuid())
  productId String
  product   Product      @relation(fields: [productId], references: [id])
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  type      MovementType
  quantity  Int
  reason    String?
  reference String? // ticket number, delivery note, etc.
  createdAt DateTime     @default(now())
}

enum MovementType {
  ENTRY
  SALE
  ADJUSTMENT
  RETURN
  EXPIRATION
}

model Alert {
  id        String      @id @default(uuid())
  productId String
  product   Product     @relation(fields: [productId], references: [id])
  type      AlertType
  message   String
  status    AlertStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

enum AlertType {
  LOW_STOCK
  EXPIRY_SOON
  EXPIRED
}

enum AlertStatus {
  PENDING
  RESOLVED
}

model InventorySession {
  id        String          @id @default(uuid())
  startedAt DateTime        @default(now())
  endedAt   DateTime?
  status    InventoryStatus @default(ONGOING)
  items     InventoryItem[]
}

enum InventoryStatus {
  ONGOING
  COMPLETED
}

model InventoryItem {
  id         String           @id @default(uuid())
  sessionId  String
  session    InventorySession @relation(fields: [sessionId], references: [id])
  productId  String
  product    Product          @relation(fields: [productId], references: [id])
  countedQty Int
  systemQty  Int
  difference Int
  adjustment Boolean          @default(false)
}

model Sale {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  total         Decimal    @db.Decimal(10, 2)
  paymentMethod String     @default("cash")
  status        SaleStatus @default(COMPLETED)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  items SaleItem[]
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  GERANT
  EMPLOYE
  AUDITEUR
}
